# Simple Indentation

--Input
(def aaa
(bbb))
--Input

--Expected
(def aaa
  (bbb))
--Expected

# Multiple Indentation Levels

--Input
(def (aaa)
      (bbb
(ccc)))
--Input

--Expected
(def (aaa)
  (bbb
    (ccc)))
--Expected

# Reduce Indentation

--Input
  (aaa)
(bbb)

    (ccc)
--Input

--Expected
(aaa)
(bbb)

(ccc)
--Expected

# Close Wrapping Parens

--Input
(def aaa
(bbb)
)
--Input

--Expected
(def aaa
  (bbb))
--Expected

# Close Wrapping Parens 2

--Input
(def aaa
(bbb
   {:a "a"
}ccc
)
  )
--Input

--Expected
(def aaa
  (bbb
    {:a "a"}
    ccc))
--Expected

# Do not cross previous line last opener

--Input
(defn foo
  ([a]
    (foo a ""))
  ([a b]
    (str a "-" b)))
--Input

--Expected
(defn foo
  ([a]
   (foo a ""))
  ([a b]
   (str a "-" b)))
--Expected

# jcd test case 1

--Input
{:this-is-a-key "fantastic"
 :short         "sad"}
--Input

--Expected
{:this-is-a-key "fantastic"
 :short         "sad"}
--Expected

# jcd test case 2

--Input
[[1001    "FIFTY"    :column
 1002    "SEVENTY"  :row]
 ]
--Input

--Expected
[[1001    "FIFTY"    :column
  1002    "SEVENTY"  :row]]
--Expected

# set alignment

--Input
#{"a"
"b" "c"}
--Input

--Expected
#{"a"
  "b" "c"}
--Expected

# Preserve commas

--Input
{:a "a", :b "b"}
--Input

--Expected
{:a "a", :b "b"}
--Expected

# Surrounding whitespace removed

--Input
( foo bar )
[ 1 2 3 ]
{  :x 1, :y 2 }
--Input

--Expected
(foo bar)
[1 2 3]
{:x 1, :y 2}
--Expected

# Surrounding newlines removed 1

--Input
(
  aaa
)
(
bbb
)
(ccc
)
(ddd
  )
--Input

--Expected
(aaa)
(bbb)
(ccc)
(ddd)
--Expected

# Surrounding newlines removed 2

--Input
[
1 2 3
]
{
:foo "bar"
}
--Input

--Expected
[1 2 3]
{:foo "bar"}
--Expected

# Surrounding newlines removed 3
> NOTE: this test case from cljfmt
> I am not sure if this is the desired behavior we want? Need to give it a think

--Input
( let [x 3
y 4]
(+ (* x x
)(* y y)
))
--Input

--Expected
(let [x 3
      y 4]
  (+ (* x x) (* y y)))
--Expected

# Inner indentation

--Input
(letfn [(foo [x]
(* x x))
(bar [x]
(+ x x))]
(foo 5))
--Input

--Expected
(letfn [(foo [x]
          (* x x))
        (bar [x]
          (+ x x))]
  (foo 5))
--Expected

# Reader conditional standard syntax

--Input
#?(:clj foo
:cljs bar)
--Input

--Expected
#?(:clj foo
   :cljs bar)
--Expected

# Reader conditional splicing syntax

--Input
#?@(:clj foo
:cljs bar)
--Input

--Expected
#?@(:clj foo
    :cljs bar)
--Expected

# Add missing whitespace

--Input
(foo(bar baz)qux)
(foo)bar(baz)
(foo[bar]#{baz}{quz bang})
--Input

--Expected
(foo (bar baz) qux)
(foo) bar (baz)
(foo [bar] #{baz} {quz bang})
--Expected

# Reader conditional whitespace

--Input
#?(:cljs(bar 1) :clj(foo 2))
:break!
#?@(:cljs[foo bar] :clj[baz quux])
--Input

--Expected
#?(:cljs (bar 1) :clj (foo 2))
:break!
#?@(:cljs [foo bar] :clj [baz quux])
--Expected

# Remove consecutive blank lines 1

--Input
(foo)


(bar)
--Input

--Expected
(foo)

(bar)
--Expected

# Remove consecutive blank lines 2

--Input
(foo)

(bar


  biz)



(qux
  baz)
--Input

--Expected
(foo)

(bar

  biz)

(qux
  baz)
--Expected

# Rule 3 Indentation 1

--Input
;; https://github.com/clj-commons/formatter/issues/9#issuecomment-446167649

;; rule 3 triggered
(foo bar
     baz
  qux)

;; rule 3 not triggered
(foo bar
 baz
  qux)
--Input

--Expected
;; https://github.com/clj-commons/formatter/issues/9#issuecomment-446167649

;; rule 3 triggered
(foo bar
     baz
     qux)

;; rule 3 not triggered
(foo bar
  baz
  qux)
--Expected


# Rule 3 Indentation 2

--Input
(foo bar
     baz
  qux)

(zap bar baz
         qux
      wizzle
                     gee)

(yes tam
      bif
     bag
     hop)
--Input

--Expected
(foo bar
     baz
     qux)

(zap bar baz
         qux
         wizzle
         gee)

(yes tam
  bif
  bag
  hop)
--Expected
