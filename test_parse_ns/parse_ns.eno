# Parse simple namespace

--Input
(ns com.example.my-app)
--Input

--Expected
{
  "nsSymbol": "com.example.my-app"
}
--Expected

# Parse simple namespace 2

--Input
(
  ns com.example.my-app

)
--Input

--Expected
{
  "nsSymbol": "com.example.my-app"
}
--Expected

# Parse namespace with multiple :require

--Input
(ns com.example.my-app
  (:require com.example.my-app.bbb [com.example.my-app.ccc])
  (:require com.example.my-app.aaa)
  )
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "symbol": "com.example.my-app.aaa"
    },
    {
      "symbol": "com.example.my-app.bbb"
    },
    {
      "symbol": "com.example.my-app.ccc"
    }
  ]
}
--Expected

# Parse namespace with require + imports

--Input
(ns com.example.my-app
  (:require com.example.my-app.bbb com.example.my-app.ccc com.example.my-app.aaa)
  (:import java.io.File
           (xxx.yyy.zzz Alpha Beta)
           hhh.eee.Ccc
           hhh.eee.Bbb
           (java.util Date UUID))
  )
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "imports": [
    {
      "package": "hhh.eee",
      "classes": ["Bbb", "Ccc"]
    },
    {
      "package": "java.io",
      "classes": ["File"]
    },
    {
      "package": "java.util",
      "classes": ["Date", "UUID"]
    },
    {
      "package": "xxx.yyy.zzz",
      "classes": ["Alpha", "Beta"]
    }
  ],
  "requires": [
    {
      "symbol": "com.example.my-app.aaa"
    },
    {
      "symbol": "com.example.my-app.bbb"
    },
    {
      "symbol": "com.example.my-app.ccc"
    }
  ]
}
--Expected

# Parse namespace with :require :as

--Input
(ns com.example.my-app
  (:require com.example.my-app.bbb [com.example.my-app.ccc :as ccc])
  (:require [com.example.my-app.aaa :as aaa)
  )
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "as": "aaa",
      "symbol": "com.example.my-app.aaa"
    },
    {
      "symbol": "com.example.my-app.bbb"
    },
    {
      "as": "ccc",
      "symbol": "com.example.my-app.ccc"
    }
  ]
}
--Expected

# Parse namespace with :refer-clojure :exclude

--Input
(ns com.example.my-app
  (:refer-clojure :exclude [print get nth]))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "referClojure": {
    "exclude": ["get", "nth", "print"]
  }
}
--Expected

# Parse namespace with :refer-clojure :only

--Input
(ns com.example.my-app
  (:refer-clojure :only [set conj number? get ==]))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "referClojure": {
    "only": ["==", "conj", "get", "number?", "set"]
  }
}
--Expected

# Parse namespace with :refer-clojure :rename

--Input
(ns com.example.my-app
  (:require bbb.ccc bbb, aaa)
  (:refer-clojure :rename {print core-print get g,  number? is-number ->> thread-last}
  )
  )
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "referClojure": {
    "rename": [["->>", "thread-last"], ["get", "g"], ["number?", "is-number"], ["print", "core-print"]]
  },
  "requires": [
    {
      "symbol": "aaa"
    },
    {
      "symbol": "bbb"
    },
    {
      "symbol": "bbb.ccc"
    }
  ]
}
--Expected

# Parse namespace with :require, :refer, :as

--Input
(ns com.example.my-app
  (:require
    [com.example.duck :as duck :refer [quack quacking eat sleep]]
    aaa.bbb
    [com.example.cow :refer [moo eat-grass] :as cow]))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "symbol": "aaa.bbb"
    },
    {
      "as": "cow",
      "symbol": "com.example.cow",
      "refer": ["eat-grass", "moo"]
    },
    {
      "as": "duck",
      "symbol": "com.example.duck",
      "refer": ["eat", "quack", "quacking", "sleep"]
    }
  ]
}
--Expected

# Parse namespace with :require :refer :all

--Input
(ns com.example.my-app
  (:require
    [com.example.duck :as duck :refer :all]
    aaa.bbb
    [com.example.cow :refer [moo eat-grass] :as cow]))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "symbol": "aaa.bbb"
    },
    {
      "as": "cow",
      "symbol": "com.example.cow",
      "refer": ["eat-grass", "moo"]
    },
    {
      "as": "duck",
      "symbol": "com.example.duck",
      "refer": "all"
    }
  ]
}
--Expected
